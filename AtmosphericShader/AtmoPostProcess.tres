[gd_resource type="Shader" format=3 uid="uid://nk0ml3i6u88t"]

[resource]
code = "shader_type spatial;

varying mat4 CAMERA;

void vertex() {
  POSITION = vec4(VERTEX, 1.0);
  CAMERA = INV_VIEW_MATRIX;
}

void fragment() {
  //calculate depth
  vec3 col = texture(SCREEN_TEXTURE, SCREEN_UV).xyz;
  float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
  vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
  vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
  view.xyz /= view.w;
  float linear_depth = -view.z;

  // ALBEDO = vec3(linear_depth-2.0, linear_depth-2.0, linear_depth-2.0);
  ALBEDO = col;
  // if (linear_depth > 2.1) ALBEDO = vec3(1.0, 1.0, 1.0) - col;

  vec4 world = CAMERA * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
  vec3 world_position = world.xyz / world.w;
}
"
